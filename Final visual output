<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>

<canvas id="canvas"></canvas>

<canvas id="canvas1">
</canvas>

<script>
    
    var c = document.getElementById('canvas'),
    ctx = c.getContext('2d'),
    cw = c.width = window.innerWidth,
    ch = c.height = window.innerHeight,
   

    //changes made from 0 to 200
    globalTick = 200,
    loaders = [],
    //changes made from 50 to 400 - CHANGES HEIGHT AND DESIGN
    loaderCount = 400,
    //space between circles
    loaderSpacing = 5,
    rand = function(min, max){
        return Math.floor( (Math.random() * (max - min + 1) ) + min);
    };

ctx.lineCap = 'round';

var Loader = function(x, y, r, hue, rangeFreq){
  this.r = r;
  this.centerX = x;
  this.centerY = y;
  this.x = x;
  this.y = y;
  //change 1 to 50
  this.xScale = 1;
  //width
  this.range = 100;
  this.rangeFreq = rangeFreq;
  this.startHue = hue;
  this.hue = hue;
  //hue = 400
  this.hueFreq = 575;
}
    
Loader.prototype.update = function(){  
  this.x = this.centerX + Math.cos(globalTick/this.rangeFreq) * this.range;
  this.xScale = (Math.sin(globalTick/this.rangeFreq) * this.range) / 100;
  this.hue = this.startHue + Math.cos(globalTick/this.hueFreq) * 360;
}

Loader.prototype.render = function(){
  ctx.save();  
  ctx.translate(this.x, this.y);
  //size of circles
  ctx.scale(this.xScale, 1);
  ctx.beginPath();
  ctx.arc(0, 2, this.r, 0, Math.PI * 2, false);
  ctx.fillStyle = 'hsla('+this.hue+', 100%, 50%, 1)';
  ctx.fill();
  ctx.restore();
};

updateLoaders = function(){
  var i = loaders.length;
  while(i--){
    loaders[i].update(); 
  }
};

renderLoaders = function(){
  var i = loaders.length;
  while(i--){
    loaders[i].render(); 
  }
};

var clear = function(){
  ctx.clearRect(0, 0, cw, ch);
};

var i = loaderCount;
while(i--){
  var x = cw/2;
  var y = ch/2 + (i * loaderSpacing) - (loaderCount/2 * (loaderSpacing));
  var r = 10;
  var hue = i;
  //speed from 500
  var rangeFreq = (1 / i) * 5125;
  loaders.push(new Loader(x, y, r, hue, rangeFreq));
}
     
var loop = function(){
  window.requestAnimFrame(loop, c);
  clear();
  updateLoaders();
  renderLoaders();
  globalTick++;
};

window.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(a){window.setTimeout(a,1E3/60)}}();

loop();

//bubble js

var circles = [],
    canvas = document.getElementById("canvas1"),
    context = canvas.getContext("2d"),
    
    // SETTINGS 
    opacity = 0.6,                                      // the opacity of the circles 0 to 1
    colors = ['rgba(34, 49, 63,' + opacity + ')',       // an array of rgb colors for the circles
              'rgba(189, 195, 199,' + opacity + ')',
              'rgba(241, 196, 15,' + opacity + ')',
              'rgba(231, 76, 60,' + opacity + ')',
              'rgba(231, 76, 60,' + opacity + ')'
             ],
    minSize = 50,                                        // the minimum size of the circles in px
    maxSize = 50,                                       // the maximum size of the circles in px
    numCircles = 50,                                   // the number of circles
    minSpeed = -2,                                     // the minimum speed, recommended: -maxspeed
    maxSpeed = 10,                                    // the maximum speed of the circles
    expandState = true;                                      // the direction of expansion

function buildArray() {
    'use strict';
    
    for (var i =0; i < numCircles ; i++){
        var color = Math.floor(Math.random() * (colors.length - 1 + 1)) + 1,
            left = Math.floor(Math.random() * (canvas.width - 0 + 1)) + 0,
            top = Math.floor(Math.random() * (canvas.height - 0 + 1)) + 0,
            size = Math.floor(Math.random() * (maxSize - minSize + 1)) + minSize,
            leftSpeed = (Math.floor(Math.random() * (maxSpeed - minSpeed + 1)) + minSpeed)/10,
            topSpeed = (Math.floor(Math.random() * (maxSpeed - minSpeed + 1)) + minSpeed)/10,
            expandState = expandState;
           
            while(leftSpeed == 0 || topSpeed == 0){
                leftSpeed = (Math.floor(Math.random() * (maxSpeed - minSpeed + 1)) + minSpeed)/10,
                topSpeed = (Math.floor(Math.random() * (maxSpeed - minSpeed + 1)) + minSpeed)/10;
            }
        var circle = {color:color, left:left, top:top, size:size, leftSpeed:leftSpeed, topSpeed:topSpeed, expandState:expandState };
        circles.push(circle);
    }
}

function build(){
    'use strict';
    
    for(var h = 0; h < circles.length; h++){
        var curCircle = circles[h];
        context.fillStyle = colors[curCircle.color-1];
        context.beginPath();
        if(curCircle.left > canvas.width+curCircle.size){
            curCircle.left = 0-curCircle.size;
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false);
        }else if(curCircle.left < 0-curCircle.size){
            curCircle.left = canvas.width+curCircle.size;
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false);
        }else{
            curCircle.left = curCircle.left+curCircle.leftSpeed;
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false); 
        }
        
        if(curCircle.top > canvas.height+curCircle.size){
            curCircle.top = 0-curCircle.size;
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false);

        }else if(curCircle.top < 0-curCircle.size){
            curCircle.top = canvas.height+curCircle.size;
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false);
        }else{
            curCircle.top = curCircle.top+curCircle.topSpeed;
            if(curCircle.size != maxSize && curCircle.size != minSize && curCircle.expandState == false){
              curCircle.size = curCircle.size-0.1;
            }
            else if(curCircle.size != maxSize && curCircle.size != minSize && curCircle.expandState == true){
              curCircle.size = curCircle.size+0.1;
            }
            else if(curCircle.size == maxSize && curCircle.expandState == true){
              curCircle.expandState = false;
              curCircle.size = curCircle.size-0.1;
            }
            else if(curCircle.size == minSize && curCircle.expandState == false){
              curCircle.expandState = true;
              curCircle.size = curCircle.size+0.1;
            }
            context.arc(curCircle.left, curCircle.top, curCircle.size, 0, 2 * Math.PI, false); 
        }
        
        context.closePath();
        context.fill();
        context.ellipse;
    }
}

var xVal = 0;

window.requestAnimFrame = (function (callback) {
    'use strict';
    return window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function (callback) {
        window.setTimeout(callback, 1000/60);
    };
})();

function animate() {
    'use strict';
    var canvas = document.getElementById("canvas1"),
        context = canvas.getContext("2d");

    // clear the canvas
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // draw the next frame
    xVal++;
    build();

    //console.log("Prep: animate ==> requestAnimFrame");
    // request a new frame
    requestAnimFrame(function () {
        animate();
    });
}
window.onload = function () {
    'use strict';
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    buildArray();
    animate();
};

window.onresize = function () {
    'use strict';
    console.log("resize");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    //buildArray();
    animate();
};

</script>
<style> 
    body {
  background: black; 
}

canvas {
  width: 50%;
  height: 60%;
}

/*bubble css*/
#canvas1{
  width: 49%;
  height: 50%;
  float:right;
}
html,body{
  margin: 0;
  padding: 0;
}
</style>
</body>
</html>
